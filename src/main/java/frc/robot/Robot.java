/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2019 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
	private Command m_autonomousCommand;

	private RobotContainer m_robotContainer;

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		// Instantiate our RobotContainer. This will perform all our button bindings,
		// and put our
		// autonomous chooser on the dashboard.
		m_robotContainer = new RobotContainer();
	}

	/**
	 * This function is called every robot packet, no matter the mode. Use this for
	 * items like diagnostics that you want ran during disabled, autonomous,
	 * teleoperated and test.
	 *
	 * <p>
	 * This runs after the mode specific periodic functions, but before LiveWindow
	 * and SmartDashboard integrated updating.
	 */
	@Override
	public void robotPeriodic() {
		// Runs the Scheduler. This is responsible for polling buttons, adding
		// newly-scheduled
		// commands, running already-scheduled commands, removing finished or
		// interrupted commands,
		// and running subsystem periodic() methods. This must be called from the
		// robot's periodic
		// block in order for anything in the Command-based framework to work.
		CommandScheduler.getInstance().run();
	}

	/**
	 * This function is called once each time the robot enters Disabled mode.
	 */
	@Override
	public void disabledInit() {
	}

	@Override
	public void disabledPeriodic() {
	}

	/**
	 * This autonomous runs the autonomous command selected by your
	 * {@link RobotContainer} class.
	 */
	@Override
	public void autonomousInit() {
		m_autonomousCommand = m_robotContainer.getAutonomousCommand();

		// schedule the autonomous command (example)
		if (m_autonomousCommand != null) {
			m_autonomousCommand.schedule();
		}
	}

	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic() {
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (m_autonomousCommand != null) {
			m_robotContainer.setWinchZero.schedule();
			m_autonomousCommand.cancel();
		}
	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopPeriodic() {

		if (m_robotContainer.getDriveStick().getRawButton(5)) {
			System.out.println("hopper start");
			m_robotContainer.hopperAdvance.schedule();
		} else {
			m_robotContainer.hopperAdvance.cancel();
		}

		if (m_robotContainer.getDriveStick().getRawButton(3)) {
			System.out.println("hopper Reverse");
			m_robotContainer.hopperReverse.schedule();
		} else {
			m_robotContainer.hopperReverse.cancel();
		}

		// if (m_robotContainer.getDriveStick().getRawButton(11)) {
		// System.out.println("zero winch");
		// m_robotContainer.setWinchZero.schedule();
		// }
		// if (m_robotContainer.getDriveStick().getRawButton(12)) {
		// System.out.println("10 inch winch");
		// m_robotContainer.setWinchTenInch.schedule();
		// }
	}

	@Override
	public void testInit() {
		// Cancels all running commands at the start of test mode.
		CommandScheduler.getInstance().cancelAll();
	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}
}

// // RobotBuilder Version: 2.0
// //
// // This file was generated by RobotBuilder. It contains sections of
// // code that are automatically generated and assigned by robotbuilder.
// // These sections will be updated in the future when you export to
// // Java from RobotBuilder. Do not put any code or make any change in
// // the blocks indicating autogenerated code or it will be lost on an
// // update. Deleting the comments indicating the section will prevent
// // it from being updated in the future.

// package frc.robot;

// import edu.wpi.first.hal.FRCNetComm.tInstances;
// import edu.wpi.first.hal.FRCNetComm.tResourceType;

// import com.ctre.phoenix.motorcontrol.ControlMode;

// import edu.wpi.first.hal.HAL;
// import edu.wpi.first.wpilibj.TimedRobot;
// import edu.wpi.first.wpilibj.command.Command;
// import edu.wpi.first.wpilibj.command.Scheduler;
// import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
// import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// import frc.robot.commands.*;

// /**
// * The VM is configured to automatically run this class, and to call the
// * functions corresponding to each mode, as described in the TimedRobot
// * documentation. If you change the name of this class or the package after
// * creating this project, you must also update the build.properties file in
// the
// * project.
// */
// public class Robot extends TimedRobot {

// private RobotContainer m_robotContainer;

// Command autonomousCommand;
// SendableChooser<Command> chooser = new SendableChooser<>();

// /**
// * This function is run when the robot is first started up and should be used
// * for any initialization code.
// */
// @Override
// public void robotInit() {

// // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
// // OI must be constructed after subsystems. If the OI creates Commands
// // (which it very likely will), subsystems are not guaranteed to be
// // constructed yet. Thus, their requires() statements may grab null
// // pointers. Bad news. Don't move it.
// m_robotContainer = new RobotContainer();

// HAL.report(tResourceType.kResourceType_Framework,
// tInstances.kFramework_RobotBuilder);

// // Add commands to Autonomous Sendable Chooser
// // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

// chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

// // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
// SmartDashboard.putData("Auto mode", chooser);
// }

// /**
// * This function is called when the disabled button is hit. You can use it to
// * reset subsystems before shutting down.
// */
// @Override
// public void disabledInit() {

// }

// @Override
// public void disabledPeriodic() {
// Scheduler.getInstance().run();
// }

// @Override
// public void autonomousInit() {
// autonomousCommand = chooser.getSelected();
// // schedule the autonomous command (example)
// if (autonomousCommand != null)
// autonomousCommand.start();
// }

// /**
// * This function is called periodically during autonomous
// */
// @Override
// public void autonomousPeriodic() {
// Scheduler.getInstance().run();
// }

// @Override
// public void teleopInit() {
// // This makes sure that the autonomous stops running when
// // teleop starts running. If you want the autonomous to
// // continue until interrupted by another command, remove
// // this line or comment it out.
// if (autonomousCommand != null)
// autonomousCommand.cancel();
// m_robotContainer.setWinchZero.schedule();
// }

// /**
// * This function is called periodically during operator control
// */
// @Override
// public void teleopPeriodic() {

// Scheduler.getInstance().run();

// // if (m_robotContainer.getDriveStick().getRawButton(3)) {
// // System.out.println("zero winch");
// // m_robotContainer.setWinchZero.schedule();

// // }

// // if (m_robotContainer.getDriveStick().getRawButton(4)) {
// // System.out.println("winch ten inch");
// // m_robotContainer.setWinchTenInch.schedule();
// // }
// }
// }
